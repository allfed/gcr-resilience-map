{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GCR Resilience Map This is the repository to collect code and bibiogrphic data needed for a semi-systematic literature review of the literature on (the geographic distribution of) resilience and risk factors against Global Catastrophic Risk. Structure of the Repo","title":"GCR Resilience Map"},{"location":"#gcr-resilience-map","text":"This is the repository to collect code and bibiogrphic data needed for a semi-systematic literature review of the literature on (the geographic distribution of) resilience and risk factors against Global Catastrophic Risk.","title":"GCR Resilience Map"},{"location":"#structure-of-the-repo","text":"","title":"Structure of the Repo"},{"location":"modules/src/generate_overview/","text":"load_config source .load_config( config_path ) Load and return the configuration from the specified YAML file. get_file_stats source .get_file_stats( directory ) Calculate statistics for CSV files in the given directory. generate_overview source .generate_overview( config_path, output_dir ) Generate an overview of GCR research based on config and CSV files.","title":"Generate overview"},{"location":"modules/src/generate_overview/#_1","text":"","title":""},{"location":"modules/src/generate_overview/#load_config","text":"source .load_config( config_path ) Load and return the configuration from the specified YAML file.","title":"load_config"},{"location":"modules/src/generate_overview/#get_file_stats","text":"source .get_file_stats( directory ) Calculate statistics for CSV files in the given directory.","title":"get_file_stats"},{"location":"modules/src/generate_overview/#generate_overview","text":"source .generate_overview( config_path, output_dir ) Generate an overview of GCR research based on config and CSV files.","title":"generate_overview"},{"location":"modules/src/utils/","text":"setup_logging source .setup_logging( config: Dict[str, Any] ) Set up logging based on configuration. save_results source .save_results( df: pd.DataFrame, filename: str ) Save results to a CSV file. save_to_ris source .save_to_ris( articles: List[Dict[str, Any]], filename: str ) Save all articles to a single RIS file. compute_symmetric_difference source .compute_symmetric_difference( df1: pd.DataFrame, df2: pd.DataFrame ) Compute the symmetric difference between two DataFrames. analyze_symmetric_difference source .analyze_symmetric_difference( df1: pd.DataFrame, df2: pd.DataFrame, name1: str, name2: str, output_dir: str ) Analyze and return a string report of the symmetric difference between two DataFrames.","title":"Utils"},{"location":"modules/src/utils/#_1","text":"","title":""},{"location":"modules/src/utils/#setup_logging","text":"source .setup_logging( config: Dict[str, Any] ) Set up logging based on configuration.","title":"setup_logging"},{"location":"modules/src/utils/#save_results","text":"source .save_results( df: pd.DataFrame, filename: str ) Save results to a CSV file.","title":"save_results"},{"location":"modules/src/utils/#save_to_ris","text":"source .save_to_ris( articles: List[Dict[str, Any]], filename: str ) Save all articles to a single RIS file.","title":"save_to_ris"},{"location":"modules/src/utils/#compute_symmetric_difference","text":"source .compute_symmetric_difference( df1: pd.DataFrame, df2: pd.DataFrame ) Compute the symmetric difference between two DataFrames.","title":"compute_symmetric_difference"},{"location":"modules/src/utils/#analyze_symmetric_difference","text":"source .analyze_symmetric_difference( df1: pd.DataFrame, df2: pd.DataFrame, name1: str, name2: str, output_dir: str ) Analyze and return a string report of the symmetric difference between two DataFrames.","title":"analyze_symmetric_difference"}]}